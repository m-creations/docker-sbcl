#!/bin/bash

# set -x

IFS=':' read -ra user_group <<< "$RUN_AS"

userid=${user_group[0]}
groupid=${user_group[1]}

# Add the user, if s/he does not exist (we do NOT check the group!)

if ! id -nu $userid &> /dev/null ; then
    groupadd -g $groupid lisp
    useradd -g $groupid -u $userid -m lisp
fi

function ensure_ownership () {
    local dir=$1
    if [[ "$(stat -c '%u' $dir)" != $userid || "$(stat -c '%g' $dir)" != $groupid ]] ; then
        chown $userid:$groupid $dir -R
    fi
}

ensure_ownership /opt/quicklisp
ensure_ownership /cache

runtime=()
toplevel=()
user=()

if [ $# -gt 0 ] ; then
  push_runtime=0
  push_toplevel=0
  for a in "$@"; do
      if [[ $push_runtime == 1 ]] ; then
        # the current $a belongs to a previous option and is pushed onto the runtime array
        runtime=("${runtime[@]}" "$a")
        push_runtime=0
        continue
      elif [[ $push_toplevel == 1 ]] ; then
        # the current $a belongs to a previous option and is pushed onto the toplevel array
        # --script has an optional filename, so if the next arg is an option, we have to
        # process it normally
        if [[ $a =~ ^-- ]] ; then
          echo "script followed by an option $a"
        else
          toplevel=("${toplevel[@]}" "$a")
          push_toplevel=0
          continue
        fi
      fi
      case "$a" in
          --help) runtime=("${runtime[@]}" "$a") ;;
          --version) runtime=("${runtime[@]}" "$a") ;;
          --core) runtime=("${runtime[@]}" "$a") ; push_runtime=1 ;;
          --dynamic-space-size) runtime=("${runtime[@]}" "$a") ; push_runtime=1 ;;
          --control-stack-size) runtime=("${runtime[@]}" "$a") ; push_runtime=1 ;;
          --sysinit) toplevel=("${toplevel[@]}" "$a") ; push_toplevel=1 ;;
          --userinit) toplevel=("${toplevel[@]}" "$a") ; push_toplevel=1 ;;
          --no-sysinit) toplevel=("${toplevel[@]}" "$a") ;;
          --no-userinit) toplevel=("${toplevel[@]}" "$a") ;;
          --disable-debugger) toplevel=("${toplevel[@]}" "$a") ;;
          --noprint) toplevel=("${toplevel[@]}" "$a") ;;
          --script) toplevel=("${toplevel[@]}" "$a") ; push_toplevel=1 ;;
          --quit) toplevel=("${toplevel[@]}" "$a") ;;
          --non-interactive) toplevel=("${toplevel[@]}" "$a") ;;
          --eval) toplevel=("${toplevel[@]}" "$a") ; push_toplevel=1 ;;
          --load) toplevel=("${toplevel[@]}" "$a") ; push_toplevel=1 ;;
          *) user=("${user[@]}" "$a") ;;
      esac
  done
fi


cat <<EOF

In our experience, you can safely ignore the following warning about
personality flags, if your code works in this Docker image.

You can read more about it at

https://github.com/dimitri/pgloader/wiki/Running-in-Docker-%28SBCL-warning%29

EOF


exec gosu $RUN_AS rlwrap sbcl-binary "${runtime[@]}" --load /opt/quicklisp/setup.lisp "${toplevel[@]}" "${user[@]}"
